#+title My emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle init.el

* Use-package

#+begin_src emacs-lisp :tangle init.el

(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;;Initialize use-package
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)


#+end_src


* Basic configuration

** UI

#+begin_src emacs-lisp :tangle init.el

(setq inhibit-startup-message t)
;;Disable visible scrollbar
(scroll-bar-mode -1)
;;Disable the toolbar
(tool-bar-mode -1)

;;disable tooltips
(tooltip-mode -1)
;;give some breating room
(set-fringe-mode 10)
;;disable the menu bars
(menu-bar-mode -1)

(electric-pair-mode 1)
(global-hl-line-mode 1)
#+end_src

** Font

#+begin_src emacs-lisp :tangle init.el

(set-face-attribute 'default nil :font "Ubuntu Mono" :height 140)
(setq default-tab-width 4)

#+end_src

** Theme

#+begin_src emacs-lisp :tangle init.el

(use-package doom-themes)

(load-theme 'doom-gruvbox t)

#+end_src
   
** Modeline

#+begin_src emacs-lisp :tangle init.el

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom (
	   (doom-modeline-bar-width 5)
	   (doom-modeline-buffer-file-name-style 'truncate-from-project)
	   (doom-modeline-height 40)))


#+end_src

** Line numbers

Sets line numbers and display column number on /modeline/
#+begin_src emacs-lisp :tangle init.el

(column-number-mode)
(global-display-line-numbers-mode t)

(dolist (mode '(eshell-mode-hook
                shell-mode-hook
                org-mode-hook
                term-mode-hook
		    treemacs-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))


#+end_src

** Rainbow delimiters

#+begin_src emacs-lisp :tangle init.el

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Counsel

#+begin_src emacs-lisp :tangle init.el

(use-package counsel
  :bind (("M-x" . counsel-M-x)
	 ("C-x b" . counsel-ibuffer)
	 ("C-x C-f" . counsel-find-file)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history)))

#+end_src

** Helpful
#+begin_src emacs-lisp :tangle init.el

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

** Backups

#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

** Lockfiles
#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src

** Truncate lines
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'toggle-truncate-lines)
#+end_src


* Ivy

** Ivy base

#+begin_src emacs-lisp :tangle init.el

(use-package ivy
  :init (ivy-mode 1)
  :diminish
  :bind (("C-s" . swiper)
	 :map ivy-minibuffer-map
	 ("TAB" . ivy-alt-done)
	 ("C-l" . ivy-alt-done)
	 ("C-j" . ivy-next-line)
	 ("C-k" . ivy-previous-line)
	 :map ivy-switch-buffer-map
	 ("C-k" . ivy-previous-line)
	 ("C-j" . ivy-next-line)
	 ("C-l" . ivy-done)
	 ("C-d" . ivy-switch-buffer-kill)
	 :map ivy-reverse-i-search-map
	 ("C-k" . ivy-prevous-line)
	 ("C-d" . ivy-reverse-i-search-kill)))


#+end_src

** Ivy rich

#+begin_src emacs-lisp :tangle init.el

(use-package ivy-rich
  :init (ivy-rich-mode 1))


#+end_src


* Programming

** Company

#+begin_src emacs-lisp :tangle init.el

(use-package company
  :init
  (setq company-idle-delay 0.0
        company-global-modes '(not org-mode slack-mode)
        company-minimum-prefix-length 1)
  :bind(
        :map company-mode-map
        ("C-;" . 'company-complete)
        :map company-active-map
        ("ESC" . 'company-abort)
        ("C-l" . 'company-complete-selection)
        )
  )

(add-hook 'after-init-hook 'global-company-mode)

#+end_src

** LSP
*** Base lsp

#+begin_src emacs-lisp :tangle init.el

(use-package lsp-mode
  :hook (
	 (js-mode . lsp)
	 (lua-mode . lsp)
	 (lsp-mode . lsp-enable-which-key-integration)
	 (lsp-mode . (lambda () (setq indent-tabs-mode nil))))
  :config
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024))
  (setq lsp-keymap-prefix "SPC l")
  (setq indent-tabs-mode nil)
  (setq lsp-restart 'auto-restart)
  (setq lsp-enable-symbol-highlighting nil)
  :custom
  (lsp-prefer-flymake nil)
  (lsp-idle-delay 0.5)
  (lsp-headerline-breadcrumb-segments '(project file symbols))
  )


#+end_src

*** Lsp addons

#+begin_src emacs-lisp :tangle init.el

(use-package lsp-ui :commands lsp-ui-mode)
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)
(use-package lsp-ui)

#+end_src

*** Lsp java

#+begin_src emacs-lisp :tangle init.el

(use-package lsp-java
  :after lsp-mode
  :init
  (add-hook 'java-mode-hook #'lsp)
  (setq lsp-java-vmargs
	(list
	 "-noverify"
	 "-Xmx1G"
	 "-XX:+UseG1GC"
	 "-XX:+UseStringDeduplication"
	 "-javaagent:/home/jakub/.m2/repository/org/projectlombok/lombok/1.18.20/lombok-1.18.20.jar"
	 )

	;; Don't organise imports on save
	lsp-java-save-action-organize-imports nil

	;; Fetch less results from the Eclipse server
	lsp-java-completion-max-results 10

	;; Currently (2019-04-24), dap-mode works best with Oracle
	;; JDK, see https://github.com/emacs-lsp/dap-mode/issues/31
	;;
	;; lsp-java-java-path "~/.emacs.d/oracle-jdk-12.0.1/bin/java"
	lsp-java-java-path "/usr/lib/jvm/java-11-openjdk/bin/java"
	)
  )

#+end_src
    
*** Lsp Spring

#+begin_src emacs-lisp :tangle init.el
(require 'lsp-java-boot)
;; to enable the lenses
(add-hook 'lsp-mode-hook #'lsp-lens-mode)
(add-hook 'java-mode-hook #'lsp-java-boot-lens-mode) 
#+end_src
    
** Eglot

#+begin_src emacs-lisp
;; (use-package eglot
;;   :hook (java-mode . eglot--managed-mode )
;;   :custom
;;   (add-to-list 'eglot-server-programs
;; 	       '(java-mode . ("eclipse.jdt.ls" "-noverify -Xmx1G -XX:+UseG1GC -XX:+UseStringDeduplication -javaagent:/home/jakub/.m2/repository/org/projectlombok/lombok/1.18.20/lombok-1.18.20.jar"))
					;	    ))

#+end_src

** Debugging
*** Dap
#+begin_src emacs-lisp :tangle init.el

(use-package dap-mode
  :after lsp-mode
  :config
  (dap-auto-configure-mode))

(use-package dap-java
  :ensure nil
  :after (lsp-java))


#+end_src

** Syntax
*** Flycheck
#+begin_src emacs-lisp :tangle init.el

(use-package flycheck)

#+end_src

** Projectile

#+begin_src emacs-lisp :tangle init.el

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom (
	   (projectile-switch-project-action 'neotree-projectile-action)
	   (projectile-completion-system 'ivy)
	   (projectile-indexing-method 'native) 
	   )
  :init
  (when (file-directory-p "~/projects")
    (setq projectile-project-search-path '("~/projects")))

  (setq projectile-switch-project-action #'projectile-dired))

(add-to-list 'projectile-globally-ignored-directories "*target")

(use-package counsel-projectile
  :config (counsel-projectile-mode))

#+end_src

** Magit

#+begin_src emacs-lisp :tangle init.el

(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))


#+end_src

** Hydra

#+begin_src emacs-lisp :tangle init.el

(use-package hydra)

#+end_src

** Yasnippet

#+begin_src emacs-lisp :tangle init.el

(use-package yasnippet
  :config (yas-global-mode))

#+end_src

** Formating

#+begin_src emacs-lisp :tangle init.el
(use-package elisp-format)
#+end_src

** Helm

#+begin_src emacs-lisp :tangle init.el
(use-package helm
  :config (helm-mode))
#+end_src

** Direnv

#+begin_src emacs-lisp

(use-package direnv
  :config
  (direnv-mode))

#+end_src
   
** Compilation buffer

#+begin_src emacs-lisp

(require 'ansi-color)
(defun trix/colorize-compilation ()
  "Colorize from `compilation-filter-start' to `point'."
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region
     compilation-filter-start (point))))

(add-hook 'compilation-filter-hook
	  #'trix/colorize-compilation)

(add-hook 'compilation-mode-hook (lambda () (setq truncate-lines t)))
(setq compilation-scroll-output t)

#+end_src
  
** Jsx
#+begin_src emacs-lisp
(use-package rjsx-mode)

#+end_src

** Emmet
#+begin_src emacs-lisp
(use-package emmet-mode
  :hook (js-mode . emmet-mode)
  :hook (html-mode . emmet-mode)
  :hook (css-mode . emmet-mode)
  :hook (rjsx-mode . emmet-mode))

#+end_src

** Prettier
#+begin_src emacs-lisp

(use-package prettier)

#+end_src

** Lua

#+begin_src emacs-lisp
(use-package lua-mode
  :custom
  (lua-indent-nested-block-content-align nil))
#+end_src


* Dashboard

#+begin_src emacs-lisp :tangle init.el

(use-package dashboard
  :init
  (setq dashboard-items '((recents . 5)
			  (agenda . 5 )
			  (bookmarks . 3)
			  (projects . 10)
			  (registers . 3)))
  (dashboard-setup-startup-hook)
  :custom
  (dashboard-center-content t)
  (dashboard-startup-banner 'logo)
  (dashboard-projects-backend 'projectile)
  :bind(
	:map dashboard-mode-map
	("C-l" . dashboard-return)
	))

(setq initial-buffer-choice (lambda() (get-buffer "*dashboard*")))

#+end_src


* Org
** Fonts and symbols


#+begin_src emacs-lisp :tangle init.el

(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(setq org-src-preserve-indentation t)

(defun trix/org-mode-setup()
  (org-indent-mode)
  (visual-line-mode 1))

(dolist (face '((org-level-1 . 1.25)
                (org-level-2 . 1.20)
                (org-level-3 . 1.15)
                (org-level-4 . 1.10)
                (org-level-5 . 1.05)
                (org-level-6 . 1.0)
                (org-level-7 . 1.0)
                (org-level-8 . 1.0)))
  (set-face-attribute (car face) nil :font "Ubuntu mono" :weight 'regular :height (cdr face)))

(use-package org
  :hook (org-mode . trix/org-mode-setup)
  :config
  (setq org-ellipsis " ▾"))

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  )

#+end_src

** Visual fill column

#+begin_src emacs-lisp

(defun trix/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . trix/org-mode-visual-fill))

#+end_src

** Agenda

#+begin_src emacs-lisp
(setq org-agenda-files '("~/org/Tasks.org" "~/org/Birthdays.org" "~/org/Learn.org"))
(setq org-agenda-start-with-log-mode t)
(setq org-log-done 'time)
(setq org-log-into-drawer t)
#+end_src


* Key bindings

** Hydra macros

#+begin_src emacs-lisp :tangle init.el
(defhydra hydra-window-utility ()
  "Window utilities:"
  ("q" delete-window "Quit window")
  ("s" save-buffer "Save buffer")
  ("k" evil-window-up "Up")
  ("j" evil-window-down "Down")
  ("h" evil-window-left "Left")
  ("l" evil-window-right "Right")
  ("c" nil "Close"))
#+end_src

** Backspace delete change 

#+begin_src emacs-lisp


(defun trix/backward-kill-word ()
  "Customize/Smart backward-kill-word."
  (interactive)
  (let* ((cp (point))
	 (backword)
	 (end)
	 (space-pos)
	 (backword-char (if (bobp)
			    ""           ;; cursor in begin of buffer
			  (buffer-substring cp (- cp 1)))))
    (if (equal (length backword-char) (string-width backword-char))
	(progn
	  (save-excursion
	    (setq backword (buffer-substring (point) (progn (forward-word -1) (point)))))
	  (setq ab/debug backword)
	  (save-excursion
	    (when (and backword          ;; when backword contains space
		       (s-contains? " " backword))
	      (setq space-pos (ignore-errors (search-backward " ")))))
	  (save-excursion
	    (let* ((pos (ignore-errors (search-backward-regexp "\n")))
		   (substr (when pos (buffer-substring pos cp))))
	      (when (or (and substr (s-blank? (s-trim substr)))
			(s-contains? "\n" backword))
		(setq end pos))))
	  (if end
	      (kill-region cp end)
	    (if space-pos
		(kill-region cp space-pos)
	      (backward-kill-word 1))))
      (kill-region cp (- cp 1)))         ;; word is non-english word
    ))

(global-set-key  [C-backspace]
		 'trix/backward-kill-word)

#+end_src

** General

#+begin_src emacs-lisp :tangle init.el

(use-package general

  :config

  (general-create-definer trix/leader-keys
    :keymaps '(override global)
    :states 'normal
    :prefix "SPC"
    )

  (trix/leader-keys
    "b" '(:ignore t :which-key "Buffer")
    "bb" '(counsel-switch-buffer :which-key "Switch buffer")
    "bh" '(previous-buffer :which-key "Previous buffer")
    "bl" '(next-buffer :which-key "Next buffer")
    "f" '(:ignore t :which-key "File")
    "ff" '(counsel-find-file :which-key "Find file")
    "fs" '(save-buffer :which-key "Save file")
    "p" '(:keymap projectile-command-map :which-key "Projectile")
    "l" '(:keymap lsp-command-map :which-key "LSP")
    "l h S" '(lsp-ivy-workspace-symbol :which-key "Workspace symbols")
    ) 


  (trix/leader-keys
    :keymaps 'java-mode-map
    "j" '(:ignore t :which-key "Java")
    "jv" '(lsp-java-assign-statement-to-local :which-key "Assign to variable")
    "ji" '(:ignore t :which-key "Imports")
    "jii" '(lsp-java-add-import :which-key "Import")
    "jio" '(lsp-java-organize-imports :which-key "Organize Imports")
    "jg" '(:ignore t :which-key "Generate")
    "jgg" '(lsp-java-generate-getters-and-setters :which-key "Getters & Setters")
    "jge" '(lsp-java-generate-equals-and-hash-code :which-key "Equals & Hash code")
    "jgs" '(lsp-java-generate-to-string :which-key "To string")
    "jgo" '(lsp-java-generate-overrides :which-key "Overrides")
    "jt" '(:ignore t :which-key "Test")
    "jtm" '(dap-java-run-test-method :which-key "Run test method")
    "jtc" '(dap-java-run-test-class :which-key "Run test class")
    "jtl" '(dap-java-run-last-test :which-key "Run last test")
    )

  (trix/leader-keys
    :keymaps 'org-mode-map
    "o" '(:ignore t :which-key "Org mode")
    "oc" '(:ignore t :which-key "Checkbox")
    "oct" '(org-toggle-checkbox :which-key "Toggle checkbox"))

  (trix/leader-keys
    "<return>" '(bookmark-bmenu-list :which-key "bookmarks"))

  (general-define-key
   "C-<tab> h" 'evil-window-left
   "M-<f1>" 'hydra-window-utility/body)

  (general-define-key
   :keymaps 'helm-map
   "C-l" 'helm-toggle-visible-mark
   "C-a" 'helm-toggle-all-marks
   "C-k" 'helm-previous-line
   "C-j" 'helm-next-line)

  (general-define-key
   "<f6>" 'lsp-treemacs-errors-list
   "<f7>" 'lsp-treemacs-symbols))

(global-set-key [f8] 'treemacs)

(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src
   
** Evil

#+begin_src emacs-lisp :tangle init.el

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (setq evil-in-single-undo t)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  ;;Neotree keybindings
  (evil-define-key 'normal neotree-mode-map (kbd "j") 'neotree-next-line)
  (evil-define-key 'normal neotree-mode-map (kbd "k") 'neotree-previous-line)
  (evil-define-key 'normal neotree-mode-map (kbd "l") 'neotree-enter)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))


#+end_src

** Evil collection

#+begin_src emacs-lisp :tangle init.el

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

#+end_src

** Which key

#+begin_src emacs-lisp :tangle init.el

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.3))

#+end_src


   
   
* Treemacs

#+begin_src emacs-lisp :tangle init.el

(use-package treemacs-all-the-icons)
(use-package lsp-treemacs
  :init
  (treemacs-load-theme 'all-the-icons)
  :custom
  (treemacs-collapse-dirs 5)
  (treemacs-width-is-initially-locked nil)
  (lsp-treemacs-sync-mode 1)
  (treemacs-indentation '(20 px)))

(use-package treemacs-evil)

(org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t)))


#+end_src
  
